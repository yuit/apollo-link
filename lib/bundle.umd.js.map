{"version":3,"file":"bundle.umd.js","sources":["../src/delayFunction.ts","../src/retryFunction.ts","../src/retryLink.ts"],"sourcesContent":["import { Operation } from 'apollo-link';\n\n/**\n * Advanced mode: a function that implements the strategy for calculating delays\n * for particular responses.\n */\nexport interface DelayFunction {\n  (count: number, operation: Operation, error: any): number;\n}\n\nexport interface DelayFunctionOptions {\n  /**\n   * The number of milliseconds to wait before attempting the first retry.\n   *\n   * Delays will increase exponentially for each attempt.  E.g. if this is\n   * set to 100, subsequent retries will be delayed by 200, 400, 800, etc,\n   * until they reach maxDelay.\n   *\n   * Note that if jittering is enabled, this is the _average_ delay.\n   *\n   * Defaults to 300.\n   */\n  initial?: number;\n\n  /**\n   * The maximum number of milliseconds that the link should wait for any\n   * retry.\n   *\n   * Defaults to Infinity.\n   */\n  max?: number;\n\n  /**\n   * Whether delays between attempts should be randomized.\n   *\n   * This helps avoid thundering herd type situations by better distributing\n   * load during major outages.\n   *\n   * Defaults to true.\n   */\n  jitter?: boolean;\n}\n\nexport function buildDelayFunction({\n  initial = 300,\n  max = Infinity,\n  jitter = true,\n}: DelayFunctionOptions = {}): DelayFunction {\n  let baseDelay;\n  if (jitter) {\n    // If we're jittering, baseDelay is half of the maximum delay for that\n    // attempt (and is, on average, the delay we will encounter).\n    baseDelay = initial;\n  } else {\n    // If we're not jittering, adjust baseDelay so that the first attempt\n    // lines up with initialDelay, for everyone's sanity.\n    baseDelay = initial / 2;\n  }\n\n  return function delayFunction(count: number) {\n    let delay = Math.min(max, baseDelay * 2 ** count);\n    if (jitter) {\n      // We opt for a full jitter approach for a mostly uniform distribution,\n      // but bound it within initialDelay and delay for everyone's sanity.\n      delay = Math.random() * delay;\n    }\n\n    return delay;\n  };\n}\n","import { Operation } from 'apollo-link';\n\n/**\n * Advanced mode: a function that determines both whether a particular\n * response should be retried.\n */\nexport interface RetryFunction {\n  (count: number, operation: Operation, error: any): boolean | Promise<boolean>;\n}\n\nexport interface RetryFunctionOptions {\n  /**\n   * The max number of times to try a single operation before giving up.\n   *\n   * Note that this INCLUDES the initial request as part of the count.\n   * E.g. maxTries of 1 indicates no retrying should occur.\n   *\n   * Defaults to 5.  Pass Infinity for infinite retries.\n   */\n  max?: number;\n\n  /**\n   * Predicate function that determines whether a particular error should\n   * trigger a retry.\n   *\n   * For example, you may want to not retry 4xx class HTTP errors.\n   *\n   * By default, all errors are retried.\n   */\n  retryIf?: (error: any, operation: Operation) => boolean | Promise<boolean>;\n}\n\nexport function buildRetryFunction({\n  max = 5,\n  retryIf,\n}: RetryFunctionOptions = {}): RetryFunction {\n  return function retryFunction(count, operation, error) {\n    if (count >= max) return false;\n    return retryIf ? retryIf(error, operation) : !!error;\n  };\n}\n","import {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  FetchResult,\n} from 'apollo-link';\n\nimport {\n  DelayFunction,\n  DelayFunctionOptions,\n  buildDelayFunction,\n} from './delayFunction';\nimport {\n  RetryFunction,\n  RetryFunctionOptions,\n  buildRetryFunction,\n} from './retryFunction';\n\nexport namespace RetryLink {\n  export interface Options {\n    /**\n     * Configuration for the delay strategy to use, or a custom delay strategy.\n     */\n    delay?: DelayFunctionOptions | DelayFunction;\n\n    /**\n     * Configuration for the retry strategy to use, or a custom retry strategy.\n     */\n    attempts?: RetryFunctionOptions | RetryFunction;\n  }\n}\n\n/**\n * Tracking and management of operations that may be (or currently are) retried.\n */\nclass RetryableOperation<TValue = any> {\n  private retryCount: number = 0;\n  private values: any[] = [];\n  private error: any;\n  private complete = false;\n  private canceled = false;\n  private observers: ZenObservable.Observer<TValue>[] = [];\n  private currentSubscription: ZenObservable.Subscription = null;\n  private timerId: number;\n\n  constructor(\n    private operation: Operation,\n    private nextLink: NextLink,\n    private delayFor: DelayFunction,\n    private retryIf: RetryFunction,\n  ) {}\n\n  /**\n   * Register a new observer for this operation.\n   *\n   * If the operation has previously emitted other events, they will be\n   * immediately triggered for the observer.\n   */\n  subscribe(observer: ZenObservable.Observer<TValue>) {\n    if (this.canceled) {\n      throw new Error(\n        `Subscribing to a retryable link that was canceled is not supported`,\n      );\n    }\n    this.observers.push(observer);\n\n    // If we've already begun, catch this observer up.\n    for (const value of this.values) {\n      observer.next(value);\n    }\n\n    if (this.complete) {\n      observer.complete();\n    } else if (this.error) {\n      observer.error(this.error);\n    }\n  }\n\n  /**\n   * Remove a previously registered observer from this operation.\n   *\n   * If no observers remain, the operation will stop retrying, and unsubscribe\n   * from its downstream link.\n   */\n  unsubscribe(observer: ZenObservable.Observer<TValue>) {\n    const index = this.observers.indexOf(observer);\n    if (index < 0) {\n      throw new Error(\n        `RetryLink BUG! Attempting to unsubscribe unknown observer!`,\n      );\n    }\n    // Note that we are careful not to change the order of length of the array,\n    // as we are often mid-iteration when calling this method.\n    this.observers[index] = null;\n\n    // If this is the last observer, we're done.\n    if (this.observers.every(o => o === null)) {\n      this.cancel();\n    }\n  }\n\n  /**\n   * Start the initial request.\n   */\n  start() {\n    if (this.currentSubscription) return; // Already started.\n\n    this.try();\n  }\n\n  /**\n   * Stop retrying for the operation, and cancel any in-progress requests.\n   */\n  cancel() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n    }\n    clearTimeout(this.timerId);\n    this.timerId = null;\n    this.currentSubscription = null;\n    this.canceled = true;\n  }\n\n  private try() {\n    this.currentSubscription = this.nextLink(this.operation).subscribe({\n      next: this.onNext,\n      error: this.onError,\n      complete: this.onComplete,\n    });\n  }\n\n  private onNext = (value: any) => {\n    this.values.push(value);\n    for (const observer of this.observers) {\n      if (!observer) continue;\n      observer.next(value);\n    }\n  };\n\n  private onComplete = () => {\n    this.complete = true;\n    for (const observer of this.observers) {\n      if (!observer) continue;\n      observer.complete();\n    }\n  };\n\n  private onError = async error => {\n    this.retryCount += 1;\n\n    // Should we retry?\n    const shouldRetry = await this.retryIf(\n      this.retryCount,\n      this.operation,\n      error,\n    );\n    if (shouldRetry) {\n      this.scheduleRetry(this.delayFor(this.retryCount, this.operation, error));\n      return;\n    }\n\n    this.error = error;\n    for (const observer of this.observers) {\n      if (!observer) continue;\n      observer.error(error);\n    }\n  };\n\n  private scheduleRetry(delay) {\n    if (this.timerId) {\n      throw new Error(`RetryLink BUG! Encountered overlapping retries`);\n    }\n\n    this.timerId = setTimeout(() => {\n      this.timerId = null;\n      this.try();\n    }, delay);\n  }\n}\n\nexport class RetryLink extends ApolloLink {\n  private delayFor: DelayFunction;\n  private retryIf: RetryFunction;\n\n  constructor({ delay, attempts }: RetryLink.Options = {}) {\n    super();\n    this.delayFor =\n      typeof delay === 'function' ? delay : buildDelayFunction(delay);\n    this.retryIf =\n      typeof attempts === 'function' ? attempts : buildRetryFunction(attempts);\n  }\n\n  public request(\n    operation: Operation,\n    nextLink: NextLink,\n  ): Observable<FetchResult> {\n    const retryable = new RetryableOperation(\n      operation,\n      nextLink,\n      this.delayFor,\n      this.retryIf,\n    );\n    retryable.start();\n\n    return new Observable(observer => {\n      retryable.subscribe(observer);\n      return () => {\n        retryable.unsubscribe(observer);\n      };\n    });\n  }\n}\n"],"names":["Observable","ApolloLink"],"mappings":"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"}